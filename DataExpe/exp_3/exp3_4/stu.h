// 任务描述
// 本关任务：编写一个函数查找结点
// 函数原型：BiTNode* LocateNode(BiTree T,KeyType e)；
// 功能说明：e是和T中结点关键字类型相同的给定值；根据e查找符合条件的结点，返回该结点指针，如无关键字为e的结点，返回NULL。

// 相关知识
// 为了完成本关任务，你需要掌握：1.二叉树，2.二叉链表，3.查找的语义。

// 编程要求
// 根据提示，在右侧编辑器补充代码，完成函数LocateNode的编写

// 测试说明
// 平台会自动提供输入，对你编写的代码进行测试：

// 下列输入为结点在满二叉树中的编号和结点值的序列，当结点在满二叉树中的编号为0时表示输入结束。最后输入的是要查找的关键字。
// 例如： 6 4 d  表示（4，d）的结点在满二叉树中的编号为6； 0 0 null代表结束标记。


// 测试输入：1 1 a    2 2 b     3 3 c    6 4 d    7 5 e    0 0 null    3
// 预期输出： 3,c        输出的是找到结点的结点值


// 测试输入：1 1 a    2 2 b     3 3 c    6 4 d    7 5 e    0 0 null    10
// 预期输出： 查找失败

BiTNode* LocateNode(BiTree T, KeyType e)
//查找结点
{
    // 请在这里补充代码，完成本关任务
    /********** Begin *********/
    if (!T) {
        return NULL;
    }

    BiTree queue[100];
    int front = 0, rear = 0;
    queue[rear++] = T;
    while (front < rear) {
        BiTree p = queue[front++];
        if (p->data.key == e) {
            return p;
        } 
        if (p->lchild) queue[rear++] = p->lchild;
        if (p->rchild) queue[rear++] = p->rchild;
    }

    return NULL;

    /********** End **********/
}
