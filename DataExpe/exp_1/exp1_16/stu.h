// 任务描述
// 本关任务：编写一个函数实现查找一个指定的线性表。
// 函数原型：int LocateList(LISTS Lists,char ListName[])
// 功能说明：Lists是一个以顺序表形式管理的线性表的集合，在集合中查找名称为ListName的线性表，有则返回线性表的逻辑序号，无则返回0。

// 相关知识
// 为了完成本关任务，你需要掌握：1.线性表的概念，2.顺序表的定义，3. 查找线性表操作的语义。

// 编程要求
// 根据提示，在右侧编辑器补充代码，完成函数
// int LocateList(LISTS Lists,char ListName[])的编写
// 此关要调用第1、10、12和14关的函数，所以要求这四关要提前通过才能完成此关任务。

// 测试说明
// 测试输入数据说明，第一行数n是要增加的线性表个数，调用你编写的函数增加n个空线性表到集合中；接着每行是一个线性表名称和以0结束的线性表数据元素，后台自动读入这些数据，依次插入到对应线性表中。最后一行是要查的线性表名称，查找成功后显示该线性表。

// 测试输入：3
//           湖北 5 10 20 30 50 0；
//           北京 30 50 60 70 80 0；
//           湖南 3 12 21 13 60 0；
//           湖北
// 预期输出：湖北 5 10 20 30 50；

// 测试输入：2
//           湖北 5 10 20 30 50 0；
//           湖南 3 12 21 13 60 0；
//           北京
// 预期输出：查找失败
#include <string.h>
int LocateList(LISTS Lists,char ListName[])
// 在Lists中查找一个名称为ListName的线性表，成功返回逻辑序号，否则返回0
{
    // 请在这里补充代码，完成本关任务
    /********** Begin *********/

    for (int i = 0; i < Lists.length; i++) {
        // 逐一对比线性表名称
        if (strcmp(Lists.elem[i].name, ListName) == 0) {
            return (i+1); // 返回逻辑序号
        }        
    }
    return 0;
    /********** End **********/
}